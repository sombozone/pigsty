#==============================================================#
# File      :   pitr.conf
# Desc      :   PgBackrest PITR Config for {{ pg_instance }} {{ pg_role }}
# Time      :   {{ '%Y-%m-%d %H:%M' | strftime }}
# Host      :   {{ pg_instance }} @ {{ inventory_hostname }}:{{ pg_port }}
# Path      :   /pg/conf/pitr.conf
# Note      :   ANSIBLE MANAGED, DO NOT CHANGE!
# License   :   AGPLv3 @ https://doc.pgsty.com/about/license
# Copyright :   2018-2025  Ruohang Feng / Vonng (rh@vonng.com)
#==============================================================#
# https://pgbackrest.org/command.html#command-restore
# https://pgbackrest.org/configuration.html#section-restore
# https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET
{% set p = pg_pitr                   | default({})           %}
{% set pitr_cluster    = p.cluster   | default(pg_cluster)   %}
{% set pitr_repo       = p.repo      | default(pgbackrest_repo[pgbackrest_method]) %}

# stanza
[{{ pitr_cluster }}]
pg1-path={{ pg_data }}
pg1-port={{ pg_port }}
{%if pg_mode|default('pgsql') == 'ivory' %}
archive-header-check=n
pg-version-force={{ pg_version|default(17) }}
{% endif %}

# config
[global]
{% for k,v in pitr_repo.items() %}
repo1-{{ k|replace('_', '-') }}={{ v|replace('${pg_cluster}', pitr_cluster ) }}
{% endfor %}

# logging
log-level-console=info
log-level-file=info
log-path={{ pgbackrest_log_dir }}

# restore
{% if p.archive is defined and p.archive|bool %}
archive-mode=preserve
{% else %}
archive-mode=off
{% endif %}
link-all=n
delta=y

{% if p.db_exclude is defined and p.db_exclude | type_debug == 'list' and p.db_exclude|length > 0 %}
# exclude databases: {{ p.db_exclude|join(',') }}
{% for db in p.db_exclude %}
db-exclude={{ db }}
{% endfor %}
{% endif %}

{% if p.db_include is defined and p.db_include | type_debug == 'list' and p.db_include|length > 0 %}
# include databases: {{ p.db_include|join(',') }}
{% for db in p.db_include %}
db-include={{ db }}
{% endfor %}
{% endif %}

{% if p.link_map is defined and p.link_map is mapping and p.link_map|length > 0 %}
{% for k,v in p.link_map.items() %}
link-map={{ k }}={{ v }}
{% endfor %}
{% endif %}

[global:restore]
{% if p.process is defined and p.process is number and p.process > 0 %}
process-max={{ p.process }}
{% else %}
process-max={{ node_cpu|int }}
{% endif %}

[global:archive-get]
process-max={{ node_cpu|int }}
